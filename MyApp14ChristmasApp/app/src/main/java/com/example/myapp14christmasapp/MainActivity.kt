package com.example.myapp14christmasapp

import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Bundle
import android.view.Gravity
import android.view.View
import android.widget.Button
import android.widget.FrameLayout
import android.widget.GridLayout
import android.widget.Switch
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.snackbar.Snackbar

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val sharedPreferences = getSharedPreferences("AdventCalendarPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()

        val calendarLayout = findViewById<GridLayout>(R.id.calendar)
        val resetButton = findViewById<Button>(R.id.reset_button)

        val themeSwitch = findViewById<Switch>(R.id.theme_switch)

        // Naƒçten√≠ p≈ôedchoz√≠ho stavu (pokud byl nastaven)
        val isDarkMode = sharedPreferences.getBoolean("dark_mode", false)
        themeSwitch.isChecked = isDarkMode

        // Nastaven√≠ poƒç√°teƒçn√≠ barvy
        calendarLayout.setBackgroundColor(if (isDarkMode) Color.BLACK else Color.WHITE)

        // P≈ôep√≠naƒç reaguje na zmƒõnu re≈æimu
        themeSwitch.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                calendarLayout.setBackgroundColor(Color.BLACK)  // Tmav√Ω re≈æim
                editor.putBoolean("dark_mode", true)
            } else {
                calendarLayout.setBackgroundColor(Color.WHITE)  // Svƒõtl√Ω re≈æim
                editor.putBoolean("dark_mode", false)
            }
            editor.apply()
        }

        val shareButton = findViewById<Button>(R.id.share_button)

        // Poƒçet snƒõzen√Ωch pol√≠ƒçek se vypoƒç√≠t√° podle SharedPreferences
        shareButton.setOnClickListener {
            val sharedPreferences = getSharedPreferences("AdventCalendarPrefs", Context.MODE_PRIVATE)
            var eatenCount = 0

            // Projdeme v≈°echny dny a spoƒç√≠t√°me snƒõden√©
            for (day in 1..24) {
                if (sharedPreferences.getString("day_$day", "closed") == "eaten") {
                    eatenCount++
                }
            }

            val remainingDays = 24 - eatenCount

            // Vytvo≈ôen√≠ sd√≠lec√≠ho Intentu
            val intent = Intent(Intent.ACTION_SEND).apply {
                type = "text/plain"
                putExtra(Intent.EXTRA_TEXT, "Snƒõdl jsem u≈æ $eatenCount pol√≠ƒçek v m√©m adventn√≠m kalend√°≈ôi! Zb√Ωv√° mi je≈°tƒõ $remainingDays dn√≠ do V√°noc. üéÑ‚ú®")
            }
            startActivity(Intent.createChooser(intent, "Sd√≠let p≈ôes:"))
        }

        fun countEatenDays(sharedPreferences: SharedPreferences): Int {
            var count = 0
            for (day in 1..24) {
                if (sharedPreferences.getString("day_$day", "closed") == "eaten") {
                    count++
                }
            }
            return count
        }

        // Funkce na vytvo≈ôen√≠ kalend√°≈ôe
        fun createCalendar() {
            calendarLayout.removeAllViews() // Vyƒçi≈°tƒõn√≠ kalend√°≈ôe
            for (day in 1..24) {
                val dayView = FrameLayout(this).apply {
                    setBackgroundColor(Color.parseColor("#006400")) 
                    layoutParams = GridLayout.LayoutParams().apply {
                        width = 200
                        height = 200
                        setMargins(25, 8, 8, 8)
                    }
                }

                val dayTextView = TextView(this).apply {
                    text = day.toString()
                    setTextColor(Color.WHITE)
                    textSize = 18f
                    gravity = Gravity.CENTER
                    layoutParams = FrameLayout.LayoutParams(
                        FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT
                    )
                }

                val state = sharedPreferences.getString("day_$day", "closed")
                when (state) {
                    "open" -> {
                        dayTextView.text = "" // ƒå√≠slo zmiz√≠
                    }
                    "eaten" -> {
                        dayTextView.text = "-" // Zobrazen√≠ pomlƒçky m√≠sto ƒç√≠sla
                    }
                }

                dayView.setOnClickListener {
                    val currentState = sharedPreferences.getString("day_$day", "closed")
                    val remainingDays = 24 - day // Poƒçet dn√≠ do V√°noc

                    when (currentState) {
                        "closed" -> {
                            Snackbar.make(calendarLayout, "Otev≈ôel jsi $day. pol√≠ƒçko.", Snackbar.LENGTH_INDEFINITE)
                                .setAction("Sn√≠m to!") {
                                    Toast.makeText(this@MainActivity, "Snƒõdl jsi $day. den, zb√Ωv√° je≈°tƒõ $remainingDays dn√≠ do V√°noc.", Toast.LENGTH_SHORT).show()

                                    editor.putString("day_$day", "eaten").apply()

                                    // APLIKACE ANIMACE NA ZMƒöNU TEXTU
                                    dayTextView.animate().alpha(0f).setDuration(500).withEndAction {
                                        // Kontrola, zda u≈æ bylo snƒõdeno v≈°ech 24 pol√≠ƒçek
                                        val eatenCount = countEatenDays(sharedPreferences)

                                        if (eatenCount == 24) {
                                            dayTextView.text = "üéÅ Vesel√© V√°noce!" // Po snƒõden√≠ v≈°ech pol√≠ƒçek se zobraz√≠ text
                                        } else {
                                            dayTextView.text = "-" // Jinak norm√°ln√≠ pomlƒçka
                                        }

                                        dayTextView.animate().alpha(1f).setDuration(500).start()
                                    }.start()
                                }.show()
                        }
                        "open" -> {
                            Snackbar.make(calendarLayout, "Bere≈° si sladkost z $day. dne.", Snackbar.LENGTH_INDEFINITE)
                                .setAction("Sn√≠st!") {
                                    Toast.makeText(this@MainActivity, "Snƒõdl jsi $day. den, zb√Ωv√° je≈°tƒõ $remainingDays dn√≠ do V√°noc.", Toast.LENGTH_SHORT).show()

                                    editor.putString("day_$day", "eaten").apply()

                                    // APLIKACE ANIMACE NA ZMƒöNU TEXTU
                                    dayTextView.animate().alpha(0f).setDuration(500).withEndAction {
                                        val eatenCount = countEatenDays(sharedPreferences)

                                        if (eatenCount == 24) {
                                            dayTextView.text = "üéÅ Vesel√© V√°noce!"
                                        } else {
                                            dayTextView.text = "-"
                                        }

                                        dayTextView.animate().alpha(1f).setDuration(500).start()
                                    }.start()
                                }.show()
                        }
                    }
                }

                dayView.addView(dayTextView)
                calendarLayout.addView(dayView)
            }
        }

        // Inicializace kalend√°≈ôe p≈ôi spu≈°tƒõn√≠
        createCalendar()

        // Funkce tlaƒç√≠tka reset
        resetButton.setOnClickListener {
            editor.clear().apply() // Vymaz√°n√≠ dat v SharedPreferences
            createCalendar() // Vytvo≈ôen√≠ nov√©ho kalend√°≈ôe
            Toast.makeText(this, "Kalend√°≈ô byl resetov√°n!", Toast.LENGTH_SHORT).show()
        }
    }
}